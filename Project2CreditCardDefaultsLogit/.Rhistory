cond_JUN_PAY<-credit.default.rawdata$PAY_4 > 7
cond_MAY_PAY<-credit.default.rawdata$PAY_5 > 7
cond_APR_PAY<-credit.default.rawdata$PAY_6 > 7
credit.default.rawdata$MONTHS_WITH_8 <- ifelse(cond_SEP_PAY,1,0) + ifelse(cond_AUG_PAY,1,0) + ifelse(cond_JUL_PAY,1,0) + ifelse(cond_JUN_PAY,1,0) + ifelse(cond_MAY_PAY,1,0) + ifelse(cond_APR_PAY,1,0)
credit.default.rawdata$EDUCATION <- as.numeric(credit.default.rawdata$EDUCATION)
credit.default.rawdata$EDUCATION <- replace(credit.default.rawdata$EDUCATION, credit.default.rawdata$EDUCATION == 0, 7)
credit.default.rawdata$EDUCATION <- replace(credit.default.rawdata$EDUCATION, credit.default.rawdata$EDUCATION == 5, 7)
credit.default.rawdata$EDUCATION <- replace(credit.default.rawdata$EDUCATION, credit.default.rawdata$EDUCATION == 6, 7)
credit.default.rawdata$ID <- as.factor(credit.default.rawdata$ID)
credit.default.rawdata$SEX <- as.factor(credit.default.rawdata$SEX)
credit.default.rawdata$EDUCATION <- as.factor(credit.default.rawdata$EDUCATION)
credit.default.rawdata$MARRIAGE <- as.factor(credit.default.rawdata$MARRIAGE)
credit.default.rawdata$PAY_0 <- as.factor(credit.default.rawdata$PAY_0)
credit.default.rawdata$PAY_2 <- as.factor(credit.default.rawdata$PAY_2)
credit.default.rawdata$PAY_3 <- as.factor(credit.default.rawdata$PAY_3)
credit.default.rawdata$PAY_4 <- as.factor(credit.default.rawdata$PAY_4)
credit.default.rawdata$PAY_5 <- as.factor(credit.default.rawdata$PAY_5)
credit.default.rawdata$PAY_6 <- as.factor(credit.default.rawdata$PAY_6)
credit.default.rawdata$default.payment.next.month <- as.factor(credit.default.rawdata$default.payment.next.month)
str(credit.default.rawdata)
Point_testing <- credit.default.rawdata[c(25001,26001),]
Excl_IDs <- c(25001,26001)
credit.default.rawdata <- credit.default.rawdata[-Excl_IDs,]
set.seed(77850) #set a random number generation seed to ensure that the split is the same everytime
inTrain <- createDataPartition(y = credit.default.rawdata$default.payment.next.month,p = 25000/29998, list = FALSE)
training <- credit.default.rawdata[ inTrain,]
testing <- credit.default.rawdata[ -inTrain,]
credit.default.model_logistic <- glm(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8
, data=training, family="binomial"(link="logit"))
summary(credit.default.model_logistic)
str(credit.default.rawdata)
credit.default.model_logistic <- glm(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8
, data=training, family="binomial"(link="logit"))
summary(credit.default.model_logistic)
View(training)
credit.default.model_logistic <- glm(default.payment.next.month~
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8
, data=training, family="binomial"(link="logit"))
summary(credit.default.model_logistic)
credit.default.model_logistic <- glm(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8
, data=training, family="binomial"(link="logit"))
summary(credit.default.model_logistic)
credit.default.model_logistic_stepwiseAIC<-stepAIC(credit.default.model_logistic,direction = c("both"),trace = 1)
summary(credit.default.model_logistic_stepwiseAIC)
credit.default.model_logistic_FINAL <- credit.default.model_logistic_stepwiseAIC #Final model
#VII. Find predicitons on testing set
credit.default.logistic_probabilities_testing <- predict(credit.default.model_logistic_FINAL,newdata=testing,type="response")
credit.default.logistic_pred_testing <- rep("1",4997)
credit.default.logistic_pred_testing[credit.default.logistic_probabilities_testing<6636/30000]="0"
confusionMatrix(credit.default.logistic_pred_testing,testing$default.payment.next.month)
#VII. Find predicitons on testing set
credit.default.logistic_probabilities_testing <- predict(credit.default.model_logistic_FINAL,newdata=testing,type="response")
View(Point_testing)
par(mfrow=c(1,4))
plot(credit.default.model_logistic_stepwiseAIC) # Normal Q-Q with some problems
par(mfrow=c(1,1))
credit.default.model_logistic_FINAL <- credit.default.model_logistic_stepwiseAIC #Final model
#VII. Find predicitons on testing set
credit.default.logistic_probabilities_testing <- predict(credit.default.model_logistic_FINAL,newdata=testing,type="response")
View(testing)
View(training)
View(testing)
ctree_tree<-ctree(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8,
data=training ) #Run ctree on training data
##ctree_tree<-ctree(default.payment.next.month~.,data=training) #Run ctree on training data - runs out of memory
plot(ctree_tree, gp = gpar(fontsize = 8)) #Plotting the tree (adjust fontsize if needed)
ctree_prediction<-predict(ctree_tree,newdata=testing, type="response") #Predict classification (for confusion matrix); default with ctree
confusionMatrix(ctree_prediction,testing$default.payment.next.month) #Display confusion matrix
####ROC Curve
ctree_probabilities_testing <-predict(ctree_tree,newdata=testing,type = "prob") #Predict probabilities
ctree_pred_testing <- prediction(ctree_probabilities_testing[,2], testing$default.payment.next.month) #Calculate errors
ctree_ROC_testing <- performance(ctree_pred_testing,"tpr","fpr") #Create ROC curve data
plot(ctree_ROC_testing) #Plot ROC curve
####AUC (area under curve)
auc.tmp <- performance(ctree_pred_testing,"auc") #Create AUC data
ctree_auc_testing <- as.numeric(auc.tmp@y.values) #Calculate AUC
ctree_auc_testing #Display AUC value: 90+% - excellent, 80-90% - very good, 70-80% - good, 60-70% - so so, below 60% - not much value
#### Lift chart
plotLift(ctree_prediction,  testing$default.payment.next.month, cumulative = TRUE, n.buckets = 10) # Plot Lift chart
credit.default.logistic_point_testing <- predict(ctree_tree,newdata=Point_testing,type="prob")
credit.default.logistic_point_testing
rpart_tree1<-rpart(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8,
data=training, method="class", control=CART_cp1) #Run ctree on training data
CART_cp1 = rpart.control(cp = 0.0025)
rpart_tree1<-rpart(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8,
data=training, method="class", control=CART_cp1) #Run ctree on training data
rpart.plot(rpart_tree1)
rpart_prediction_class1<-predict(rpart_tree1,newdata=testing, type="class") #Predict classification (for confusion matrix)
confusionMatrix(rpart_prediction_class1,testing$default.payment.next.month) #Display confusion matrix
rpart_probabilities_testing <-predict(rpart_tree1,newdata=testing,type = "prob") #Predict probabilities
rpart_pred_testing <- prediction(rpart_probabilities_testing[,2], testing$default.payment.next.month) #Calculate errors
rpart_ROC_testing <- performance(rpart_pred_testing,"tpr","fpr") #Create ROC curve data
plot(rpart_ROC_testing) #Plot ROC curve
auc.tmp <- performance(rpart_pred_testing,"auc") #Create AUC data
rpart_auc_testing <- as.numeric(auc.tmp@y.values) #Calculate AUC
rpart_auc_testing #Display AUC value
plotLift(rpart_prediction_class1,  testing$default.payment.next.month, cumulative = TRUE, n.buckets = 10) # Plot Lift chart
credit.default.logistic_point_testing <- predict(rpart_tree1,newdata=Point_testing,type="prob")
credit.default.logistic_point_testing
# RPART2
CART_cp2 = rpart.control(cp = 0.00068)
rpart_tree2<-rpart(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8,
data=training, method="class", control=CART_cp2) #Run ctree on training data
printcp(rpart_tree2) # Understand the relationship between the error and cp
plotcp(rpart_tree2) # As a rule of thumb pick up the largest cp which does not give a substantial drop in error
rpart.plot(rpart_tree2)
rpart_prediction_class2<-predict(rpart_tree2,newdata=testing, type="class") #Predict classification (for confusion matrix)
confusionMatrix(rpart_prediction_class2,testing$default.payment.next.month) #Display confusion matrix
rpart_probabilities_testing2 <-predict(rpart_tree2,newdata=testing,type = "prob") #Predict probabilities
rpart_pred_testing2 <- prediction(rpart_probabilities_testing2[,2], testing$default.payment.next.month) #Calculate errors
rpart_ROC_testing2 <- performance(rpart_pred_testing2,"tpr","fpr") #Create ROC curve data
plot(rpart_ROC_testing2) #Plot ROC curve
auc.tmp <- performance(rpart_pred_testing2,"auc") #Create AUC data
rpart_auc_testing2 <- as.numeric(auc.tmp@y.values) #Calculate AUC
rpart_auc_testing2 #Display AUC value
credit.default.logistic_point_testing <- predict(rpart_tree2,newdata=Point_testing,type="prob")
credit.default.logistic_point_testing
Excl_IDs_odds <- c(8844)
Excl_IDs_odds <- c(8844)
testing_ex_odds <- testing[-Excl_IDs_odds,]
testing_ex_odds <- testing[-Excl_IDs_odds,]
View(testing_ex_odds)
Excl_IDs_odds <- 8844
testing_ex_odds <- testing[-Excl_IDs_odds,]
testing_ex_odds <- testing[-Excl_IDs_odds,]
ctree_tree<-ctree(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6,
data=training ) #Run ctree on training data
##ctree_tree<-ctree(default.payment.next.month~.,data=training) #Run ctree on training data - runs out of memory
plot(ctree_tree, gp = gpar(fontsize = 8)) #Plotting the tree (adjust fontsize if needed)
ctree_tree<-ctree(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8,
data=training ) #Run ctree on training data
##ctree_tree<-ctree(default.payment.next.month~.,data=training) #Run ctree on training data - runs out of memory
plot(ctree_tree, gp = gpar(fontsize = 8)) #Plotting the tree (adjust fontsize if needed)
ctree_prediction<-predict(ctree_tree,newdata=testing, type="response") #Predict classification (for confusion matrix); default with ctree
confusionMatrix(ctree_prediction,testing$default.payment.next.month) #Display confusion matrix
testing_ex_odds <- testing[-ID="8844",]
write.csv(testing, row.names = TRUE, col.names = TRUE)
write.csv(testing, file = "testing.csv") # export the selected model's predictions into a CSV file
ctree_tree<-ctree(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6,
data=training ) #Run ctree on training data
##ctree_tree<-ctree(default.payment.next.month~.,data=training) #Run ctree on training data - runs out of memory
plot(ctree_tree, gp = gpar(fontsize = 8)) #Plotting the tree (adjust fontsize if needed)
ctree_prediction<-predict(ctree_tree,newdata=testing, type="response") #Predict classification (for confusion matrix); default with ctree
Excl_IDs_odds <- 1491
testing_ex_odds <- testing[-Excl_IDs_odds,]
View(testing_ex_odds)
Excl_IDs_odds <- 1492
testing_ex_odds <- testing[-Excl_IDs_odds,]
View(testing_ex_odds)
testing[1492,]
testing[1491,]
testing[1490,]
Excl_IDs_odds <- 1490
testing_ex_odds <- testing[-Excl_IDs_odds,]
View(testing_ex_odds)
credit.default.logistic_probabilities_testing <- predict(credit.default.model_logistic_FINAL,newdata=testing_ex_odds,type="response")
credit.default.logistic_pred_testing <- rep("1",4996)
credit.default.logistic_pred_testing[credit.default.logistic_probabilities_testing<6636/30000]="0"
confusionMatrix(credit.default.logistic_pred_testing,testing_ex_odds$default.payment.next.month)
#VIII. Build ROC Curve
credit.default.logistic_ROC_pred <- prediction(credit.default.logistic_probabilities_testing, testing$default.payment.next.month)
credit.default.logistic_ROC_testing <- performance(credit.default.logistic_ROC_pred,"tpr","fpr")
plot(credit.default.logistic_ROC_testing)
#VIII. Build ROC Curve
credit.default.logistic_ROC_pred <- prediction(credit.default.logistic_probabilities_testing, testing_ex_odds$default.payment.next.month)
credit.default.logistic_ROC_testing <- performance(credit.default.logistic_ROC_pred,"tpr","fpr")
plot(credit.default.logistic_ROC_testing)
#IX. Compute AUC
credit.default.auc.tmp <- performance(credit.default.logistic_ROC_pred,"auc")
credit.default.logistic_auc_testing <- as.numeric(credit.default.auc.tmp@y.values)
credit.default.logistic_auc_testing #Display AUC value: 90+% - excellent, 80-90% - very good, 70-80% - good, 60-70% - so so, below 60% - not much value
#X. Build lift chart
plotLift(credit.default.logistic_probabilities_testing, testing_ex_odds$default.payment.next.month, cumulative = TRUE, n.buckets = 10)
credit.default.logistic_point_testing <- predict(credit.default.model_logistic_FINAL,newdata=Point_testing,type="response")
credit.default.logistic_point_testing
ctree_tree<-ctree(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8,
data=training ) #Run ctree on training data
##ctree_tree<-ctree(default.payment.next.month~.,data=training) #Run ctree on training data - runs out of memory
plot(ctree_tree, gp = gpar(fontsize = 8)) #Plotting the tree (adjust fontsize if needed)
ctree_prediction<-predict(ctree_tree,newdata=testing, type="response") #Predict classification (for confusion matrix); default with ctree
confusionMatrix(ctree_prediction,testing$default.payment.next.month) #Display confusion matrix
####ROC Curve
ctree_probabilities_testing <-predict(ctree_tree,newdata=testing,type = "prob") #Predict probabilities
ctree_pred_testing <- prediction(ctree_probabilities_testing[,2], testing$default.payment.next.month) #Calculate errors
ctree_ROC_testing <- performance(ctree_pred_testing,"tpr","fpr") #Create ROC curve data
plot(ctree_ROC_testing) #Plot ROC curve
####AUC (area under curve)
auc.tmp <- performance(ctree_pred_testing,"auc") #Create AUC data
ctree_auc_testing <- as.numeric(auc.tmp@y.values) #Calculate AUC
ctree_auc_testing #Display AUC value: 90+% - excellent, 80-90% - very good, 70-80% - good, 60-70% - so so, below 60% - not much value
credit.default.logistic_point_testing <- predict(ctree_tree,newdata=Point_testing,type="prob")
credit.default.logistic_point_testing
CART_cp1 = rpart.control(cp = 0.0025)
rpart_tree1<-rpart(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8,
data=training, method="class", control=CART_cp1) #Run ctree on training data
rpart_tree1<-rpart(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8,
data=training, method="class", control=CART_cp1) #Run ctree on training data
printcp(rpart_tree1) # Understand the relationship between the error and cp
plotcp(rpart_tree1) # As a rule of thumb pick up the largest cp which does not give a substantial drop in error
rpart.plot(rpart_tree1)
rpart_prediction_class1<-predict(rpart_tree1,newdata=testing, type="class") #Predict classification (for confusion matrix)
confusionMatrix(rpart_prediction_class1,testing$default.payment.next.month) #Display confusion matrix
rpart_probabilities_testing <-predict(rpart_tree1,newdata=testing,type = "prob") #Predict probabilities
rpart_pred_testing <- prediction(rpart_probabilities_testing[,2], testing$default.payment.next.month) #Calculate errors
rpart_ROC_testing <- performance(rpart_pred_testing,"tpr","fpr") #Create ROC curve data
plot(rpart_ROC_testing) #Plot ROC curve
auc.tmp <- performance(rpart_pred_testing,"auc") #Create AUC data
rpart_auc_testing <- as.numeric(auc.tmp@y.values) #Calculate AUC
rpart_auc_testing #Display AUC value
plotLift(rpart_prediction_class1,  testing$default.payment.next.month, cumulative = TRUE, n.buckets = 10) # Plot Lift chart
credit.default.logistic_point_testing <- predict(rpart_tree1,newdata=Point_testing,type="prob")
credit.default.logistic_point_testing
rpart_tree2<-rpart(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8,
data=training, method="class", control=CART_cp2) #Run ctree on training data
rpart_tree2<-rpart(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+ BILL_OVER_LIMIT_1 + BILL_OVER_LIMIT_2 + BILL_OVER_LIMIT_3 +
BILL_OVER_LIMIT_4 + BILL_OVER_LIMIT_5 + BILL_OVER_LIMIT_6 +
REPAYMENT_RATIO_1 + REPAYMENT_RATIO_2 + REPAYMENT_RATIO_3 +
REPAYMENT_RATIO_4 + REPAYMENT_RATIO_5 + REPAYMENT_RATIO_6 +
MONTHS_ABOVE_LIMIT + MONTHS_WITH_NEG1 + MONTHS_WITH_NEG2 + MONTHS_WITH_0 +
MONTHS_WITH_1 + MONTHS_WITH_2 + MONTHS_WITH_3 + MONTHS_WITH_4 + MONTHS_WITH_5 + MONTHS_WITH_6 + MONTHS_WITH_7 + MONTHS_WITH_8,
data=training, method="class", control=CART_cp2) #Run ctree on training data
printcp(rpart_tree2) # Understand the relationship between the error and cp
plotcp(rpart_tree2) # As a rule of thumb pick up the largest cp which does not give a substantial drop in error
rpart.plot(rpart_tree2)
rpart_prediction_class2<-predict(rpart_tree2,newdata=testing, type="class") #Predict classification (for confusion matrix)
confusionMatrix(rpart_prediction_class2,testing$default.payment.next.month) #Display confusion matrix
rpart_probabilities_testing2 <-predict(rpart_tree2,newdata=testing,type = "prob") #Predict probabilities
rpart_pred_testing2 <- prediction(rpart_probabilities_testing2[,2], testing$default.payment.next.month) #Calculate errors
rpart_ROC_testing2 <- performance(rpart_pred_testing2,"tpr","fpr") #Create ROC curve data
plot(rpart_ROC_testing2) #Plot ROC curve
auc.tmp <- performance(rpart_pred_testing2,"auc") #Create AUC data
rpart_auc_testing2 <- as.numeric(auc.tmp@y.values) #Calculate AUC
rpart_auc_testing2 #Display AUC value
plotLift(rpart_prediction_class2,  testing$default.payment.next.month, cumulative = TRUE, n.buckets = 10) # Plot Lift chart
credit.default.logistic_point_testing <- predict(rpart_tree2,newdata=Point_testing,type="prob")
credit.default.logistic_point_testing
if("pacman" %in% rownames(installed.packages()) == FALSE) {install.packages("pacman")}
pacman::p_load("caret","ROCR","lift","glmnet","MASS","e1071")
credit.default.rawdata<-read.csv(file.choose())
str(credit.default.rawdata)
credit.default.rawdata$EDUCATION <- as.numeric(credit.default.rawdata$EDUCATION)
credit.default.rawdata$EDUCATION <- replace(credit.default.rawdata$EDUCATION, credit.default.rawdata$EDUCATION == 0, 7)
credit.default.rawdata$EDUCATION <- replace(credit.default.rawdata$EDUCATION, credit.default.rawdata$EDUCATION == 5, 7)
credit.default.rawdata$EDUCATION <- replace(credit.default.rawdata$EDUCATION, credit.default.rawdata$EDUCATION == 6, 7)
credit.default.rawdata$ID <- as.factor(credit.default.rawdata$ID)
credit.default.rawdata$SEX <- as.factor(credit.default.rawdata$SEX)
credit.default.rawdata$EDUCATION <- as.factor(credit.default.rawdata$EDUCATION)
credit.default.rawdata$MARRIAGE <- as.factor(credit.default.rawdata$MARRIAGE)
credit.default.rawdata$PAY_0 <- as.factor(credit.default.rawdata$PAY_0)
credit.default.rawdata$PAY_2 <- as.factor(credit.default.rawdata$PAY_2)
credit.default.rawdata$PAY_3 <- as.factor(credit.default.rawdata$PAY_3)
credit.default.rawdata$PAY_4 <- as.factor(credit.default.rawdata$PAY_4)
credit.default.rawdata$PAY_5 <- as.factor(credit.default.rawdata$PAY_5)
credit.default.rawdata$PAY_6 <- as.factor(credit.default.rawdata$PAY_6)
credit.default.rawdata$default.payment.next.month <- as.factor(credit.default.rawdata$default.payment.next.month)
str(credit.default.rawdata)
#Excl_IDs <- c(25001,26001,25144,1895)
Excl_IDs <- c(25001,26001)
Point_testing <- credit.default.rawdata[c(25001,26001),]
credit.default.rawdata <- credit.default.rawdata[-Excl_IDs,]
set.seed(77850) #set a random number generation seed to ensure that the split is the same everytime
inTrain <- createDataPartition(y = credit.default.rawdata$default.payment.next.month,p = 25000/29998, list = FALSE)
training <- credit.default.rawdata[ inTrain,]
testing <- credit.default.rawdata[ -inTrain,]
credit.default.model_logistic <- glm(default.payment.next.month~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE + AGE +
PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 +
BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6
+PAY_AMT1 +PAY_AMT2 +PAY_AMT3 + PAY_AMT4 + PAY_AMT5 + PAY_AMT6
, data=training, family="binomial"(link="logit"))
summary(credit.default.model_logistic)
credit.default.model_logistic_stepwiseAIC<-stepAIC(credit.default.model_logistic,direction = c("both"),trace = 1)
summary(credit.default.model_logistic_stepwiseAIC)
par(mfrow=c(1,4))
plot(credit.default.model_logistic_stepwiseAIC) # Normal Q-Q with some problems
par(mfrow=c(1,1))
credit.default.model_logistic_FINAL <- credit.default.model_logistic_stepwiseAIC #Final model
#VII. Find predicitons on testing set
credit.default.logistic_probabilities_testing <- predict(credit.default.model_logistic_FINAL,newdata=testing,type="response")
credit.default.logistic_pred_testing <- rep("1",4997)
View(credit.default.model_logistic_FINAL)
credit.default.logistic_pred_testing[credit.default.logistic_probabilities_testing<6636/30000]="0"
confusionMatrix(credit.default.logistic_pred_testing,testing$default.payment.next.month)
#VIII. Build ROC Curve
credit.default.logistic_ROC_pred <- prediction(credit.default.logistic_probabilities_testing, testing$default.payment.next.month)
credit.default.logistic_ROC_testing <- performance(credit.default.logistic_ROC_pred,"tpr","fpr")
plot(credit.default.logistic_ROC_testing)
#IX. Compute AUC
credit.default.auc.tmp <- performance(credit.default.logistic_ROC_pred,"auc")
credit.default.logistic_auc_testing <- as.numeric(credit.default.auc.tmp@y.values)
credit.default.logistic_auc_testing #Display AUC value: 90+% - excellent, 80-90% - very good, 70-80% - good, 60-70% - so so, below 60% - not much value
#X. Build lift chart
plotLift(credit.default.logistic_probabilities_testing, testing$default.payment.next.month, cumulative = TRUE, n.buckets = 10)
credit.default.logistic_point_testing <- predict(credit.default.model_logistic_FINAL,newdata=Point_testing,type="response")
credit.default.logistic_point_testing
if("pacman" %in% rownames(installed.packages()) == FALSE) {install.packages("pacman")} # Check if you have universal installer package, install if not
if("rpart.plot" %in% rownames(installed.packages()) == FALSE) {install.packages("rpart.plot")} # Check if you have universal installer package, install if not
pacman::p_load("caret","partykit","ROCR","lift","rpart","e1071")
library(rpart.plot)
credit.default.rawdata<-read.csv(file.choose())
credit.default.rawdata<-read.csv(file.choose())
str(df)
View(credit.default.rawdata)
df<- credit.default.rawdata
str(df)
df$bedrooms <- as.factor(df$bedrooms)
df$floors <- as.factor(df$floors)
df$waterfront <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$zipcode <- as.factor(df$zipcode)
str(df)
if("pacman" %in% rownames(installed.packages()) == FALSE) {install.packages("pacman")}
model1 <- lm(prices ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront
+ view + condition + grade + yr_built, df, na.omit,
method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE,
singular.ok = TRUE, contrasts = NULL)
model1 <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront
+ view + condition + grade + yr_built, df, na.omit,
method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE,
singular.ok = TRUE, contrasts = NULL)
model1 <- lm(price ~ bedrooms + sqft_living, df, na.omit)
View(df)
model1 <- lm(price ~ sqft_living, df)
model1 <- lm(price ~ sqft_living +  sqft_lot + floors + waterfront
+ view + condition + grade + yr_built, df)
model1
summary(model1)
library(glmnet)
library(caret)
model2 <-
### fit an elastic net model using 5-fold CV
set.seed(1984)
model2 <- train(price ~ ., data=df, method="glmnet", tuneLength=5, trControl=trainControl(method="cv", number=5))
model2 <- train(price ~ ., data=df, method="glmnet", tuneLength=5, trControl=trainControl(method="cv", number=5))
coef(model2$finalModel, model2$bestTune$lambda)
summary(model2)
model1$coefficients - t(coef(model2$finalModel, model2$bestTune$lambda))[1,]
str(df)
df_clean <- df[,c(-df$id,df$date)]
df_clean <- df[,c(-df$id,-df$date)]
str(df)
df_clean <- df[,-c(df$id,df$date)]
str(df_clear)
str(df_clean)
df_clean <- df[,-c(df$id,df$date)]
str(df_clean)
df_clean <- df[,-c(id,date)]
df_clean <- df[,-c(id,date)]
df_clean <- df[,-c(1,2)]
str(df_clean)
model1 <- lm(price ~ sqft_living +  sqft_lot + floors + waterfront
+ view + condition + grade + yr_built, df_clean)
summary(model1)
model1 <- lm(price ~ sqft_living +  sqft_lot + floors + waterfront
+ view + grade + yr_built, df_clean)
summary(model1)
crossval <-  cv.glmnet(x = df_clean[,-1], y = df_clean$price)
X <- df_clean[,-1]
Y <- df_clean$price
X <- as.matrix(df_clean[,-1])
Y <- df_clean$price
crossval <-  cv.glmnet(x = X, y = Y)
model_stepwiseAIC_prep <- glm(price ~ ., data=df_clean, family="gaussian"(link = "identity"))
summary(model_stepwiseAIC_prep)
model_stepwiseAIC <- stepAIC(model_stepwiseAIC_prep,direction = c("both"),trace = 1)
library(caret)
pacman::p_load("caret","ROCR","lift","glmnet","MASS","e1071")
model_stepwiseAIC <- stepAIC(model_stepwiseAIC_prep,direction = c("both"),trace = 1)
summary(credit.default.model_logistic_stepwiseAIC)
summary(model_stepwiseAIC)
par(mfrow=c(1,4))
plot(model_stepwiseAIC) # Normal Q-Q with some problems
par(mfrow=c(1,1))
crossval <-  cv.glmnet(x = X, y = Y)
crossval <-  cv.glmnet(x = X, y = Y, na.action = na.omit)
crossval <-  cv.glmnet(x = X, y = Y, na.omit)
crossval <-  cv.glmnet(x = X, y = Y, na.action)
crossval <-  cv.glmnet(x = X, y = Y)
plot(crossval)
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(model1, las = 1)      # Residuals, Fitted, ...
par(opar)
load("QuickStartExample.RData")
View(X)
fit1 <- glmnet(x = X, y = y, alpha = 1, lambda = penalty ) #estimate the model with that
fit1 <- glmnet(x = X, y = Y, alpha = 1, lambda = penalty ) #estimate the model with that
fit1 <- glmnet(x = X, y = Y, alpha = 1 ) #estimate the model with that
coef(fit1)
plot(fit1)
print(fit1)
cvfit = cv.glmnet(X,Y)
cvfit = cv.glmnet(X,Y)
model_stepwiseAIC_prep <- glm(price ~ ., data=df_clean, family="gaussian"(link = "identity"))
summary(model_stepwiseAIC_prep)
model_stepwiseAIC <- stepAIC(model_stepwiseAIC_prep,direction = c("both"),trace = 1)
summary(model_stepwiseAIC)
