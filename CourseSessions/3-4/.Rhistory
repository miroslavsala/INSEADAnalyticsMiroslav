#install.packages("forecast") #-- do this only once
#Check the book: https://www.otexts.org/fpp and the blog: http://robjhyndman.com/hyndsight/forecasting/
library("forecast")
ElectricPriceData<-read.csv(file.choose(), header=TRUE, sep=",")
View(ElectricPriceData)
ElectricPrice_ts <- ts(ElectricPriceData$ElectricRate,start=2004, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
fit <- decompose(ElectricPrice_ts, type="multiplicative") #decompose using "classical" method, multiplicative form
plot(fit)
fit <- stl(ElectricPrice_ts, t.window=12, s.window="periodic", robust=TRUE) #decompose using STL (Season and trend using Loess)
plot(fit)
# Create exponential smoothing models: additive vs multiplicative noise (first A vs M), additive vs multiplicative trend (second A vs M) and no seasonality vs automatic detection (third N vs Z) trend and no seasonlity (AAN), multiplicative (MMN)
ElectricPrice_AAN <- ets(ElectricPrice_ts, model="AAN")
ElectricPrice_AAZ <- ets(ElectricPrice_ts, model="AAZ", damped=FALSE)
ElectricPrice_MMN <- ets(ElectricPrice_ts, model="MMN", damped=FALSE)
ElectricPrice_MMZ <- ets(ElectricPrice_ts, model="MMZ", damped=FALSE)
# Create their prediction "cones" for 360 months (30 years) into the future with quintile confidence intervals
ElectricPrice_AAN_pred <- forecast(ElectricPrice_AAN, h=360, level=c(0.2, 0.4, 0.6, 0.8))
ElectricPrice_AAZ_pred <- forecast(ElectricPrice_AAZ, h=360, level=c(0.2, 0.4, 0.6, 0.8))
ElectricPrice_MMN_pred <- forecast(ElectricPrice_MMN, h=360, level=c(0.2, 0.4, 0.6, 0.8))
ElectricPrice_MMZ_pred <- forecast(ElectricPrice_MMZ, h=360, level=c(0.2, 0.4, 0.6, 0.8))
# Compare the prediction "cones" visually
par(mfrow=c(1,4)) # This command sets the plot window to show 1 row of 4 plots
plot(ElectricPrice_AAN_pred, xlab="Year", ylab="Predicted Electric Rate")
plot(ElectricPrice_MMN_pred, xlab="Year", ylab="Predicted Electric Rate")
plot(ElectricPrice_AAZ_pred, xlab="Year", ylab="Predicted Electric Rate")
plot(ElectricPrice_MMZ_pred, xlab="Year", ylab="Predicted Electric Rate")
ElectricPrice_ts <- ts(ElectricPriceData$ElectricRate,start=c(2004,4), frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
?ts
# Compare the prediction "cones" visually
par(mfrow=c(1,2)) # This command sets the plot window to show 1 row of 4 plots
# Create their prediction "cones" for 360 months (30 years) into the future with quintile confidence intervals
ElectricPrice_AAN_pred <- forecast(ElectricPrice_AAN, h=360, level=c(0.2, 0.4, 0.6, 0.8))
ElectricPrice_AAZ_pred <- forecast(ElectricPrice_AAZ, h=360, level=c(0.2, 0.4, 0.6, 0.8))
plot(ElectricPrice_AAN_pred, xlab="Year", ylab="Predicted Electric Rate")
plot(ElectricPrice_AAZ_pred, xlab="Year", ylab="Predicted Electric Rate")
# Lets look at what our models actually are
ElectricPrice_AAZ
write.csv(ElectricPrice_MMZ_pred$mean, file = "Predicted Electric Rates.csv") # export the selected model's predictions into a CSV file
#Create a trigonometric box-cox autoregressive trend seasonality (TBATS) model
ElectricPrice_tbats <- tbats(ElectricPrice_ts)
ElectricPrice_tbats_pred <-forecast(ElectricPrice_tbats, h=360)
plot(ElectricPrice_tbats_pred, xlab="Year", ylab="Predicted Electric Rate")
par(mfrow=c(1,1)) # Lets look at them one-by-one
plot(ElectricPrice_tbats_pred, xlab="Year", ylab="Predicted Electric Rate")
ElectricPrice_tbats
ElectricPrice_MMZ_d <- ets(ElectricPrice_ts, model="MMZ", damped=TRUE)
ElectricPrice_MMZ_d_pred <- forecast(ElectricPrice_MMZ_d, h=360, level=c(0.2, 0.4, 0.6, 0.8))
plot(ElectricPrice_MMZ_d_pred, xlab="Year", ylab="Predicted Electric Rate")
library("fpp")
# we will use the US consumption and income dataset (comes with fpp "book")
plot(usconsumption)
View(usconsumption)
par(mfrow=c(1,2))
plot(usconsumption[,1], xlab="Year", ylab="US consumption") #plotting consumption (by quarter)
plot(diff(usconsumption[,1],1), xlab="Year", ylab="change in US consumption") # differencing: plotting change in consumptoin from one quarter to the next
par(mfrow=c(1,1))
Acf(usconsumption[,1],main="") # ACF = auto-correlation function
fit <- auto.arima(usconsumption[,1],seasonal=FALSE) #automatically fits the ARIMA model (auto-regressive integrated moving average)
fit
Acf(residuals(fit))
plot(forecast(fit,20)) #20 stands for 20 quarters = 5 years
fit <- auto.arima(usconsumption[,1],seasonal=TRUE) #automatically fits the ARIMA model (auto-regressive integrated moving average)
Acf(residuals(fit))
plot(forecast(fit,20)) #20 stands for 20 quarters = 5 years
fit <- auto.arima(usconsumption[,1],seasonal=FALSE) #automatically fits the ARIMA model (auto-regressive integrated moving average)
# we will use a10 dataset (also comes with fpp - sales of antidiabetic drug)
par(mfrow=c(1,3))
View(a10)
plot(a10, xlab="Year",
ylab="A10 sales")
plot(log(a10), xlab="Year",
ylab="log A10 sales")
plot(diff(log(a10),12), xlab="Year",
ylab="Annual change in monthly log A10 sales")
fit <- stl(log(a10), t.window=12, s.window="periodic", robust=TRUE)
plot(fit)
fit <- auto.arima(a10,seasonal=TRUE)
fit
par(mfrow=c(1,1))
Acf(residuals(fit))
plot(forecast(fit,60)) #60 stands for 60 months = 5 years
# with insurance and advertising data (also part of FPP)
plot(insurance, main="Insurance advertising and quotations", xlab="Year")
View(insurance)
# Lagged predictors. Test 0, 1, 2 or 3 lags.
Advert <- cbind(insurance[,2],
c(NA,insurance[1:39,2]),
c(NA,NA,insurance[1:38,2]),
c(NA,NA,NA,insurance[1:37,2]))
colnames(Advert) <- paste("AdLag",0:3,sep="")
Advert
# Choose optimal lag length for advertising based on AIC
# Restrict data so models use same fitting period
fit1 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1], d=0)
fit2 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:2], d=0)
fit3 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:3], d=0)
fit4 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:4], d=0)
AIC(fit1)
AIC(fit2)
AIC(fit3)
AIC(fit4)
#Best fit (as per AIC) is with all data (1:2), so the final model becomes
fit <- auto.arima(insurance[,1], xreg=Advert[,1:2], d=0)
fit
# forecast insurance quotes with advertising = 10
fc10 <- forecast(fit, xreg=cbind(rep(10,20),c(Advert[40,1],rep(10,19))), h=20)
plot(fc10, main="Forecast quotes with advertising set to 10", ylab="Quotes")
# see how forecasts with advertising = 8 will differ from advertising = 2
par(mfrow=c(1,2))
fc8 <- forecast(fit, xreg=cbind(rep(8,20),c(Advert[40,1],rep(8,19))), h=20)
plot(fc8, main="Forecast quotes with advertising set to 8", ylab="Quotes")
fc2 <- forecast(fit, xreg=cbind(rep(2,20),c(Advert[40,1],rep(2,19))), h=20)
plot(fc2, main="Forecast quotes with advertising set to 2", ylab="Quotes")
