#install.packages("forecast") #-- do this only once
#Check the book: https://www.otexts.org/fpp and the blog: http://robjhyndman.com/hyndsight/forecasting/
library("forecast")
#install.packages("forecast") #-- do this only once
#Check the book: https://www.otexts.org/fpp and the blog: http://robjhyndman.com/hyndsight/forecasting/
library("forecast")
Yahoo_US<-read.csv(file.choose(), header=TRUE, sep=",")
View(Yahoo_US)
Yahoo_US_ts <- ts(Yahoo_US$PeopleUS,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
fit <- decompose(Yahoo_US_ts, type="multiplicative") #decompose using "classical" method, multiplicative form
plot(fit)
fit <- decompose(Yahoo_US_ts, type="additive") #decompose using "classical" method, additive form
plot(fit)
fit <- stl(Yahoo_US_ts, t.window=12, s.window="periodic", robust=TRUE) #decompose using STL (Season and trend using Loess)
plot(fit)
plot(Yahoo_US_ts)
fit <- decompose(Yahoo_US_ts, type="multiplicative") #decompose using "classical" method, multiplicative form
plot(fit)
fit <- decompose(Yahoo_US_ts, type="additive") #decompose using "classical" method, additive form
plot(fit)
fit <- stl(Yahoo_US_ts, t.window=12, s.window="periodic", robust=TRUE) #decompose using STL (Season and trend using Loess)
plot(fit)
plot(Yahoo_US_ts)
View(Yahoo_US)
fit <- decompose(Yahoo_US_ts, type="multiplicative") #decompose using "classical" method, multiplicative form
plot(fit)
fit <- decompose(Yahoo_US_ts, type="additive") #decompose using "classical" method, additive form
plot(fit)
fit <- stl(Yahoo_US_ts, t.window=12, s.window="periodic", robust=TRUE) #decompose using STL (Season and trend using Loess)
plot(fit)
# Create exponential smoothing models: additive vs multiplicative noise (first A vs M), additive vs multiplicative trend (second A vs M) and no seasonality vs automatic detection (third N vs Z) trend and no seasonlity (AAN), multiplicative (MMN)
Yahoo_US_AAN <- ets(Yahoo_US_ts, model="AAN")
Yahoo_US_AAZ <- ets(Yahoo_US_ts, model="AAZ", damped=FALSE)
Yahoo_US_MMN <- ets(Yahoo_US_ts, model="MMN", damped=FALSE)
Yahoo_US_MMZ <- ets(Yahoo_US_ts, model="MMZ", damped=FALSE)
# Create their prediction "cones" for 120 months (10 years) into the future with quintile confidence intervals
Yahoo_US_AAN_pred <- forecast(Yahoo_US_AAN, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_US_AAZ_pred <- forecast(Yahoo_US_AAZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_US_MMN_pred <- forecast(Yahoo_US_MMN, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_US_MMZ_pred <- forecast(Yahoo_US_MMZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
# Compare the prediction "cones" visually
par(mfrow=c(1,4)) # This command sets the plot window to show 1 row of 4 plots
plot(Yahoo_US_AAN_pred, xlab="Year", ylab="Predicted MAU")
plot(Yahoo_US_MMN_pred, xlab="Year", ylab="Predicted MAU")
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU")
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted MAU")
#Create a trigonometric box-cox autoregressive trend seasonality (TBATS) model
Yahoo_US_tbats <- tbats(Yahoo_US_ts)
Yahoo_US_tbats_pred <-forecast(Yahoo_US_tbats, h=120)
plot(Yahoo_US_tbats_pred, xlab="Year", ylab="Predicted Electric Rate")
par(mfrow=c(1,3)) # Lets look at the three models with seasonality on one graph on the same scale
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted Electric Rate", ylim=c(0,0.3))
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted Electric Rate", ylim=c(0,0.3))
plot(Yahoo_US_tbats_pred, xlab="Year", ylab="Predicted Electric Rate", ylim=c(0,0.3))
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted Electric Rate") #, ylim=c(0,0.3))
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted Electric Rate") #, ylim=c(0,0.3))
plot(Yahoo_US_tbats_pred, xlab="Year", ylab="Predicted Electric Rate")# , ylim=c(0,0.3))
# Lets look at what our models actually are
Yahoo_US_AAZ
Yahoo_US_MMZ
Yahoo_US_tbats
# Print the mean predictions from the three seasonal models to the console screen to copy and paste from the screen to Excel
cbind(Yahoo_US_AAZ_pred$mean, Yahoo_US_MMZ_pred$mean, Yahoo_US_tbats_pred$mean)
write.csv(Yahoo_US_AAZ_pred$mean, file = "Predicted_MAU_US_AAZ.csv") # export the selected model's predictions into a CSV file
write.csv(Yahoo_US_MMZ_pred$mean, file = "Predicted_MAU_US_MMZ.csv") # export the selected model's predictions into a CSV file
write.csv(Yahoo_US_tbats_pred$mean, file = "Predicted_MAU_US_tbats.csv") # export the selected model's predictions into a CSV file
#ARIMA model could also be fitted but does not work well in this case. Need ARIMA with covariates (e.g., Fourier)
Yahoo_US_arima <- auto.arima(Yahoo_US_ts, seasonal=TRUE)
Yahoo_US_arima
Yahoo_US_arima_pred <-forecast(Yahoo_US_arima, h=36)
plot(Yahoo_US_arima_pred, ylab="Predicted Electric Rate")
Yahoo_US_arima_pred <-forecast(Yahoo_US_arima, h=120)
plot(Yahoo_US_arima_pred, ylab="Predicted MAU US")
fit <- decompose(Yahoo_US_ts, type="multiplicative") #decompose using "classical" method, multiplicative form
plot(fit)
install.packages("forecast","fpp") #-- do this only once
install.packages("fpp")
library("fpp")
# we will use the US consumption and income dataset (comes with fpp "book")
plot(usconsumption)
View(usconsumption)
par(mfrow=c(1,2))
plot(usconsumption[,1], xlab="Year", ylab="US consumption") #plotting consumption (by quarter)
plot(diff(usconsumption[,1],1), xlab="Year", ylab="change in US consumption") # differencing: plotting change in consumptoin from one quarter to the next
par(mfrow=c(1,1))
Acf(usconsumption[,1],main="") # ACF = auto-correlation function
fit <- auto.arima(usconsumption[,1],seasonal=FALSE) #automatically fits the ARIMA model (auto-regressive integrated moving average)
fit
Acf(residuals(fit))
plot(forecast(fit,20)) #20 stands for 20 quarters = 5 years
# we will use a10 dataset (also comes with fpp - sales of antidiabetic drug)
par(mfrow=c(1,3))
View(a10)
plot(a10, xlab="Year",
ylab="A10 sales")
plot(log(a10), xlab="Year",
ylab="log A10 sales")
plot(diff(log(a10),12), xlab="Year",
ylab="Annual change in monthly log A10 sales")
fit <- stl(log(a10), t.window=12, s.window="periodic", robust=TRUE)
plot(fit)
fit <- auto.arima(a10,seasonal=FALSE)
fit
fit <- auto.arima(a10,seasonal=TRUE)
fit
par(mfrow=c(1,1))
Acf(residuals(fit))
plot(forecast(fit,60)) #60 stands for 60 months = 5 years
# we will use the US consumption and income dataset (comes with fpp "book")
plot(usconsumption)
View(usconsumption)
par(mfrow=c(1,2))
plot(usconsumption[,1], xlab="Year", ylab="US consumption") #plotting consumption (by quarter)
plot(diff(usconsumption[,1],1), xlab="Year", ylab="change in US consumption") # differencing: plotting change in consumptoin from one quarter to the next
par(mfrow=c(1,1))
Acf(usconsumption[,1],main="") # ACF = auto-correlation function
fit <- auto.arima(usconsumption[,1],seasonal=FALSE) #automatically fits the ARIMA model (auto-regressive integrated moving average)
fit
Acf(residuals(fit))
plot(forecast(fit,20)) #20 stands for 20 quarters = 5 years
# we will use a10 dataset (also comes with fpp - sales of antidiabetic drug)
par(mfrow=c(1,3))
View(a10)
plot(a10, xlab="Year",
ylab="A10 sales")
plot(log(a10), xlab="Year",
ylab="log A10 sales")
plot(diff(log(a10),12), xlab="Year",
ylab="Annual change in monthly log A10 sales")
fit <- stl(log(a10), t.window=12, s.window="periodic", robust=TRUE)
plot(fit)
fit <- auto.arima(a10,seasonal=FALSE)
fit
fit <- auto.arima(a10,seasonal=TRUE)
fit
par(mfrow=c(1,1))
Acf(residuals(fit))
plot(forecast(fit,60)) #60 stands for 60 months = 5 years
# with insurance and advertising data (also part of FPP)
plot(insurance, main="Insurance advertising and quotations", xlab="Year")
View(insurance)
# Lagged predictors. Test 0, 1, 2 or 3 lags.
Advert <- cbind(insurance[,2],
c(NA,insurance[1:39,2]),
c(NA,NA,insurance[1:38,2]),
c(NA,NA,NA,insurance[1:37,2]))
colnames(Advert) <- paste("AdLag",0:3,sep="")
Advert
# Choose optimal lag length for advertising based on AIC
# Restrict data so models use same fitting period
fit1 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1], d=0)
fit2 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:2], d=0)
fit3 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:3], d=0)
fit4 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:4], d=0)
AIC(fit1)
AIC(fit2)
AIC(fit3)
AIC(fit4)
#Best fit (as per AIC) is with all data (1:2), so the final model becomes
fit <- auto.arima(insurance[,1], xreg=Advert[,1:2], d=0)
fit
# forecast insurance quotes with advertising = 10
fc10 <- forecast(fit, xreg=cbind(rep(10,20),c(Advert[40,1],rep(10,19))), h=20)
plot(fc10, main="Forecast quotes with advertising set to 10", ylab="Quotes")
# see how forecasts with advertising = 8 will differ from advertising = 2
par(mfrow=c(1,2))
fc8 <- forecast(fit, xreg=cbind(rep(8,20),c(Advert[40,1],rep(8,19))), h=20)
plot(fc8, main="Forecast quotes with advertising set to 8", ylab="Quotes")
fc2 <- forecast(fit, xreg=cbind(rep(2,20),c(Advert[40,1],rep(2,19))), h=20)
plot(fc2, main="Forecast quotes with advertising set to 2", ylab="Quotes")
#loading the data from Yahoo
Yahoo_US<-read.csv(file.choose(), header=TRUE, sep=",")
View(a10)
fit <- stl(log(Yahoo_US), t.window=12, s.window="periodic", robust=TRUE)
#loading the data from Yahoo
Yahoo_US<-read.csv(file.choose(), header=FALSE, sep=",")
View(Yahoo_US)
#loading the data from Yahoo
Yahoo_US_arima<-read.csv(file.choose(), header=FALSE, sep=",")
#loading the data from Yahoo
Yahoo_US_arima<-read.csv(file.choose(), header=FALSE, sep=",")
View(Yahoo_US_arima)
fit <- stl(log(Yahoo_US_arima), t.window=12, s.window="periodic", robust=TRUE)
fit <- auto.arima(Yahoo_US_arima[,1],seasonal=TRUE) #automatically fits the ARIMA model (auto-regressive integrated moving average)
fit <- auto.arima(Yahoo_US_arima[,1],seasonal=FALSE) #automatically fits the ARIMA model (auto-regressive integrated moving average)
#loading the data from Yahoo
Yahoo_US<-read.csv(file.choose(), header=TRUE, sep=",")
Yahoo_US_ts <- ts(Yahoo_US$PeopleUS,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
fit <- auto.arima(Yahoo_US_ts[,1],seasonal=TRUE)
fit <- auto.arima(Yahoo_US_ts,seasonal=TRUE)
fit <- stl(log(Yahoo_US_arima), t.window=12, s.window="periodic", robust=TRUE)
fit <- stl(log(Yahoo_US_ts), t.window=12, s.window="periodic", robust=TRUE)
plot(forecast(fit,120)) #120 stands for 120 months = 10 years
#install.packages("forecast","fpp") #-- do this only once
#These packages are from the "Forecasting Principles and Practice" - excellent and free book: https://www.otexts.org/fpp
library("forecast")
library("fpp")
par(mfrow=c(1,1))
Acf(residuals(fit))
plot(forecast(fit,120)) #120 stands for 120 months = 10 years
fit
fit <- auto.arima(Yahoo_US_ts,seasonal=TRUE)
fit
Acf(residuals(fit))
plot(forecast(fit,120)) #120 stands for 120 months = 10 years
fit <- stl(log(Yahoo_US_ts), t.window=12, s.window="periodic", robust=TRUE)
Acf(residuals(fit))
plot(forecast(fit,120)) #120 stands for 120 months = 10 years
fit <- auto.arima(Yahoo_US_ts,seasonal=TRUE) #automatically fits the ARIMA model (auto-regressive integrated moving average)
#fit <- stl(log(Yahoo_US_ts), t.window=12, s.window="periodic", robust=TRUE)
fit
par(mfrow=c(1,1))
Acf(residuals(fit))
plot(forecast(fit,120)) #120 stands for 120 months = 10 years
fit
write.csv(fit, file = "Predicted_MAU_US_arima.csv") # export the selected model's predictions into a CSV file
fit
write.csv(forecast(fit,120), file = "Predicted_MAU_US_arima.csv") # export the selected model's predictions into a CSV file
#install.packages("forecast") #-- do this only once
#Check the book: https://www.otexts.org/fpp and the blog: http://robjhyndman.com/hyndsight/forecasting/
library("forecast")
Yahoo_US<-read.csv(file.choose(), header=TRUE, sep=",")
View(Yahoo_US)
Yahoo_US_ts <- ts(Yahoo_US$PeopleUS,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
fit <- decompose(Yahoo_US_ts, type="multiplicative") #decompose using "classical" method, multiplicative form
plot(fit)
# Create exponential smoothing models: additive vs multiplicative noise (first A vs M), additive vs multiplicative trend (second A vs M) and no seasonality vs automatic detection (third N vs Z) trend and no seasonlity (AAN), multiplicative (MMN)
Yahoo_US_AAN <- ets(Yahoo_US_ts, model="AAN")
Yahoo_US_AAZ <- ets(Yahoo_US_ts, model="AAZ", damped=FALSE)
Yahoo_US_MMN <- ets(Yahoo_US_ts, model="MMN", damped=FALSE)
Yahoo_US_MMZ <- ets(Yahoo_US_ts, model="MMZ", damped=FALSE)
# Create their prediction "cones" for 120 months (10 years) into the future with quintile confidence intervals
Yahoo_US_AAN_pred <- forecast(Yahoo_US_AAN, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_US_AAZ_pred <- forecast(Yahoo_US_AAZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_US_MMN_pred <- forecast(Yahoo_US_MMN, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_US_MMZ_pred <- forecast(Yahoo_US_MMZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
# Compare the prediction "cones" visually
par(mfrow=c(1,4)) # This command sets the plot window to show 1 row of 4 plots
plot(Yahoo_US_AAN_pred, xlab="Year", ylab="Predicted MAU")
plot(Yahoo_US_MMN_pred, xlab="Year", ylab="Predicted MAU")
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU")
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted MAU")
fit <- decompose(Yahoo_US_ts, type="multiplicative") #decompose using "classical" method, multiplicative form
plot(fit)
library("fpp")
#install.packages("forecast","fpp") #-- do this only once
#These packages are from the "Forecasting Principles and Practice" - excellent and free book: https://www.otexts.org/fpp
library("forecast")
fit <- auto.arima(Yahoo_US_ts,seasonal=TRUE) #automatically fits the ARIMA model (auto-regressive integrated moving average)
fit
par(mfrow=c(1,1))
Acf(residuals(fit))
plot(forecast(fit,120)) #120 stands for 120 months = 10 years
#install.packages("forecast") #-- do this only once
#Check the book: https://www.otexts.org/fpp and the blog: http://robjhyndman.com/hyndsight/forecasting/
library("forecast")
Yahoo_US<-read.csv(file.choose(), header=TRUE, sep=",")
Yahoo_US_ts <- ts(Yahoo_US$PeopleUS,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
fit <- decompose(Yahoo_US_ts, type="multiplicative") #decompose using "classical" method, multiplicative form
plot(fit)
Yahoo_US_AAZ <- ets(Yahoo_US_ts, model="AAZ", damped=TRUE)
Yahoo_US_MMZ <- ets(Yahoo_US_ts, model="MMZ", damped=TRUE)
Yahoo_US_AAZ_pred <- forecast(Yahoo_US_AAZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_US_MMZ_pred <- forecast(Yahoo_US_MMZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
# Compare the prediction "cones" visually
par(mfrow=c(2,2)) # This command sets the plot window to show 1 row of 4 plots
#Create a trigonometric box-cox autoregressive trend seasonality (TBATS) model
Yahoo_US_tbats <- tbats(Yahoo_US_ts)
Yahoo_US_tbats_pred <-forecast(Yahoo_US_tbats, h=120)
par(mfrow=c(2,2)) # Lets look at the three models with seasonality on one graph on the same scale
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_tbats_pred, xlab="Year", ylab="Predicted MAU")# , ylim=c(0,0.3))
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU")
#ARIMA model could also be fitted but does not work well in this case. Need ARIMA with covariates (e.g., Fourier)
Yahoo_US_arima <- auto.arima(Yahoo_US_ts, seasonal=TRUE)
Yahoo_US_arima
Yahoo_US_arima_pred <-forecast(Yahoo_US_arima, h=120)
#Plot forecasts
par(mfrow=c(2,2)) # Lets look at the three models with seasonality on one graph on the same scale
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_tbats_pred, xlab="Year", ylab="Predicted MAU")# , ylim=c(0,0.3))
plot(Yahoo_US_arima_pred, ylab="Predicted MAU")
View(Yahoo_US_arima_pred)
# Create exponential smoothing models: additive vs multiplicative noise (first A vs M), additive vs multiplicative trend (second A vs M) and no seasonality vs automatic detection (third N vs Z) trend and no seasonlity (AAN), multiplicative (MMN)
Yahoo_US_AAZ <- ets(Yahoo_US_ts, model="AAZ", damped=FALSE)
Yahoo_US_AAZ # Lets look at what our models actually are
# Create their prediction "cones" for 120 months (10 years) into the future with quintile confidence intervals
Yahoo_US_AAZ_pred <- forecast(Yahoo_US_AAZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
# Create exponential smoothing models: additive vs multiplicative noise (first A vs M), additive vs multiplicative trend (second A vs M) and no seasonality vs automatic detection (third N vs Z) trend and no seasonlity (AAN), multiplicative (MMN)
Yahoo_US_AAZ <- ets(Yahoo_US_ts, model="AAZ", damped=TRUE)
Yahoo_US_AAZ # Lets look at what our models actually are
# Create their prediction "cones" for 120 months (10 years) into the future with quintile confidence intervals
Yahoo_US_AAZ_pred <- forecast(Yahoo_US_AAZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_tbats_pred, xlab="Year", ylab="Predicted MAU")# , ylim=c(0,0.3))
plot(Yahoo_US_arima_pred, ylab="Predicted MAU")
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_tbats_pred, xlab="Year", ylab="Predicted MAU")# , ylim=c(0,0.3))
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_tbats_pred, xlab="Year", ylab="Predicted MAU")# , ylim=c(0,0.3))
plot(Yahoo_US_arima_pred, ylab="Predicted MAU")
# Print the mean predictions from the three seasonal models to the console screen to copy and paste from the screen to Excel
cbind(Yahoo_US_AAZ_pred$mean, Yahoo_US_MMZ_pred$mean, Yahoo_US_tbats_pred$mean, Yahoo_US_arima_pred$mean)
write.csv(Yahoo_US_AAZ_pred$mean, file = "Predicted_MAU_US_AAZ.csv") # export the selected model's predictions into a CSV file
write.csv(Yahoo_US_MMZ_pred$mean, file = "Predicted_MAU_US_MMZ.csv") # export the selected model's predictions into a CSV file
write.csv(Yahoo_US_tbats_pred$mean, file = "Predicted_MAU_US_tbats.csv") # export the selected model's predictions into a CSV file
write.csv(Yahoo_US_tbats_pred$mean, file = "Predicted_MAU_US_tbats.csv") # export the selected model's predictions into a CSV file
# Print the mean predictions from the three seasonal models to the console screen to copy and paste from the screen to Excel
models <- cbind(Yahoo_US_AAZ_pred$mean, Yahoo_US_MMZ_pred$mean, Yahoo_US_tbats_pred$mean, Yahoo_US_arima_pred$mean)
write.csv(models, file = "Predicted_MAU_all_models.csv")
Yahoo_US<-read.csv(file.choose(), header=TRUE, sep=",")
Yahoo_US_ts <- ts(Yahoo_US$PeopleUS,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
Yahoo_W_ts <- ts(Yahoo_W$PeopleW,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
Yahoo_W_ts <- ts(Yahoo_US$PeopleW,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
Yahoo_US<-read.csv(file.choose(), header=TRUE, sep=",")
Yahoo_US_ts <- ts(MAU$PeopleUS,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
Yahoo_input_data<-read.csv(file.choose(), header=TRUE, sep=",")
Yahoo_US_ts <- ts(Yahoo_input_data$PeopleUS,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
Yahoo_W_ts <- ts(Yahoo_input_data$PeopleW,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
# Create exponential smoothing models: additive vs multiplicative noise (first A vs M), additive vs multiplicative trend (second A vs M) and no seasonality vs automatic detection (third N vs Z) trend and no seasonlity (AAN), multiplicative (MMN)
Yahoo_US_AAZ <- ets(Yahoo_US_ts, model="AAZ", damped=TRUE)
Yahoo_US_AAZ # Lets look at what our models actually are
Yahoo_US_MMZ <- ets(Yahoo_US_ts, model="MMZ", damped=TRUE)
Yahoo_US_MMZ # Lets look at what our models actually are
Yahoo_W_AAZ <- ets(Yahoo_W_ts, model="AAZ", damped=TRUE)
Yahoo_W_AAZ # Lets look at what our models actually are
Yahoo_W_MMZ <- ets(Yahoo_W_ts, model="MMZ", damped=TRUE)
Yahoo_W_MMZ # Lets look at what our models actually are
# Create their prediction "cones" for 120 months (10 years) into the future with quintile confidence intervals
Yahoo_US_AAZ_pred <- forecast(Yahoo_US_AAZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_US_MMZ_pred <- forecast(Yahoo_US_MMZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_W_AAZ_pred <- forecast(Yahoo_W_AAZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_W_MMZ_pred <- forecast(Yahoo_W_MMZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
#Create a trigonometric box-cox autoregressive trend seasonality (TBATS) model
Yahoo_US_tbats <- tbats(Yahoo_US_ts)
Yahoo_US_tbats_pred <-forecast(Yahoo_US_tbats, h=120)
Yahoo_US_tbats # Lets look at what our models actually are
Yahoo_W_tbats <- tbats(Yahoo_W_ts)
Yahoo_W_tbats_pred <-forecast(Yahoo_W_tbats, h=120)
Yahoo_W_tbats # Lets look at what our models actually are
#ARIMA model could also be fitted but does not work well in this case. Need ARIMA with covariates (e.g., Fourier)
Yahoo_US_arima <- auto.arima(Yahoo_US_ts, seasonal=TRUE)
Yahoo_US_arima
Yahoo_US_arima_pred <-forecast(Yahoo_US_arima, h=120)
Yahoo_W_arima <- auto.arima(Yahoo_W_ts, seasonal=TRUE)
Yahoo_W_arima
Yahoo_W_arima_pred <-forecast(Yahoo_W_arima, h=120)
#Plot forecasts
par(mfrow=c(2,2)) # Lets look at the three models with seasonality on one graph on the same scale
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_tbats_pred, xlab="Year", ylab="Predicted MAU")# , ylim=c(0,0.3))
plot(Yahoo_US_arima_pred, ylab="Predicted MAU")
plot(Yahoo_W_AAZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_W_MMZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_W_tbats_pred, xlab="Year", ylab="Predicted MAU")# , ylim=c(0,0.3))
plot(Yahoo_W_arima_pred, ylab="Predicted MAU")
# Print the mean predictions from the three seasonal models to the console screen to copy and paste from the screen to Excel
models <- cbind(Yahoo_US_AAZ_pred$mean, Yahoo_US_MMZ_pred$mean, Yahoo_US_tbats_pred$mean, Yahoo_US_arima_pred$mean,Yahoo_W_AAZ_pred$mean, Yahoo_W_MMZ_pred$mean, Yahoo_W_tbats_pred$mean, Yahoo_W_arima_pred$mean)
write.csv(models, file = "Predicted_MAU_all_models.csv")
fit <- decompose(Yahoo_US_ts, type="multiplicative") #decompose using "classical" method, multiplicative form
plot(fit)
fit <- decompose(Yahoo_US_ts, type="additive") #decompose using "classical" method, additive form
plot(fit)
fit <- stl(Yahoo_US_ts, t.window=12, s.window="periodic", robust=TRUE) #decompose using STL (Season and trend using Loess)
plot(fit)
#install.packages("forecast") #-- do this only once
#Check the book: https://www.otexts.org/fpp and the blog: http://robjhyndman.com/hyndsight/forecasting/
library("forecast")
Yahoo_input_data<-read.csv(file.choose(), header=TRUE, sep=",")
Yahoo_US_ts <- ts(Yahoo_input_data$PeopleUS,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
Yahoo_W_ts <- ts(Yahoo_input_data$PeopleW,start=2010, frequency=12) # ts function defines the dataset as timeseries starting Jan 2004 and having seasonality of frequency 12 (monthly)
fit <- decompose(Yahoo_US_ts, type="multiplicative") #decompose using "classical" method, multiplicative form
plot(fit)
fit <- decompose(Yahoo_US_ts, type="additive") #decompose using "classical" method, additive form
plot(fit)
fit <- stl(Yahoo_US_ts, t.window=12, s.window="periodic", robust=TRUE) #decompose using STL (Season and trend using Loess)
plot(fit)
plot(Yahoo_US_ts)
# Create exponential smoothing models: additive vs multiplicative noise (first A vs M), additive vs multiplicative trend (second A vs M) and no seasonality vs automatic detection (third N vs Z) trend and no seasonlity (AAN), multiplicative (MMN)
Yahoo_US_AAZ <- ets(Yahoo_US_ts, model="AAZ", damped=TRUE)
Yahoo_US_AAZ # Lets look at what our models actually are
Yahoo_US_MMZ <- ets(Yahoo_US_ts, model="MMZ", damped=TRUE)
Yahoo_US_MMZ # Lets look at what our models actually are
Yahoo_W_AAZ <- ets(Yahoo_W_ts, model="AAZ", damped=TRUE)
Yahoo_W_AAZ # Lets look at what our models actually are
Yahoo_W_MMZ <- ets(Yahoo_W_ts, model="MMZ", damped=TRUE)
Yahoo_W_MMZ # Lets look at what our models actually are
# Create their prediction "cones" for 120 months (10 years) into the future with quintile confidence intervals
Yahoo_US_AAZ_pred <- forecast(Yahoo_US_AAZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_US_MMZ_pred <- forecast(Yahoo_US_MMZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_W_AAZ_pred <- forecast(Yahoo_W_AAZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
Yahoo_W_MMZ_pred <- forecast(Yahoo_W_MMZ, h=120, level=c(0.2, 0.4, 0.6, 0.8))
#Create a trigonometric box-cox autoregressive trend seasonality (TBATS) model
Yahoo_US_tbats <- tbats(Yahoo_US_ts)
Yahoo_US_tbats_pred <-forecast(Yahoo_US_tbats, h=120)
Yahoo_US_tbats # Lets look at what our models actually are
Yahoo_W_tbats <- tbats(Yahoo_W_ts)
Yahoo_W_tbats_pred <-forecast(Yahoo_W_tbats, h=120)
Yahoo_W_tbats # Lets look at what our models actually are
#ARIMA model could also be fitted but does not work well in this case. Need ARIMA with covariates (e.g., Fourier)
Yahoo_US_arima <- auto.arima(Yahoo_US_ts, seasonal=TRUE)
Yahoo_US_arima
Yahoo_US_arima_pred <-forecast(Yahoo_US_arima, h=120)
Yahoo_W_arima <- auto.arima(Yahoo_W_ts, seasonal=TRUE)
Yahoo_W_arima
Yahoo_W_arima_pred <-forecast(Yahoo_W_arima, h=120)
#Plot forecasts
par(mfrow=c(2,2)) # Lets look at the three models with seasonality on one graph on the same scale
plot(Yahoo_US_AAZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_MMZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_US_tbats_pred, xlab="Year", ylab="Predicted MAU")# , ylim=c(0,0.3))
plot(Yahoo_US_arima_pred, ylab="Predicted MAU")
plot(Yahoo_W_AAZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_W_MMZ_pred, xlab="Year", ylab="Predicted MAU") #, ylim=c(0,0.3))
plot(Yahoo_W_tbats_pred, xlab="Year", ylab="Predicted MAU")# , ylim=c(0,0.3))
plot(Yahoo_W_arima_pred, ylab="Predicted MAU")
